package simpledb.execution;

import java.util.NoSuchElementException;

import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;
import simpledb.transaction.TransactionAbortedException;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate predicate;
    private OpIterator childOne;
    private OpIterator childTwo;
    private Tuple outerTuple = null;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator c1, OpIterator c2) {
        this.predicate = p;
        this.childOne = c1;
        this.childTwo = c2;
    }

    public JoinPredicate getJoinPredicate() {
        return this.predicate;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField1Name() {
        int fieldOneNum = this.predicate.getField1();
        return this.childOne.getTupleDesc().getFieldName(fieldOneNum);
    }

    /**
     * @return the field name of join field2. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField2Name() {
        int fieldTwoNum = this.predicate.getField2();
        return this.childTwo.getTupleDesc().getFieldName(fieldTwoNum);
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.merge(this.childOne.getTupleDesc(), this.childTwo.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        this.childOne.open();
        this.outerTuple = this.childOne.next();
        this.childTwo.open();
        super.open();
    }

    public void close() {
        super.close();
        this.childOne.close();
        this.childTwo.close();
        this.outerTuple = null;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.childOne.rewind();
        this.childTwo.rewind();
        this.outerTuple = this.childOne.next();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        while (this.outerTuple != null) {
            while (this.childTwo.hasNext()) {
                Tuple currChildTwoTuple = this.childTwo.next();
                if (this.predicate.filter(this.outerTuple, currChildTwoTuple)) {
                    return Tuple.merge(this.outerTuple, currChildTwoTuple);
                }
            }
            this.childTwo.rewind();
            if (!this.childOne.hasNext()) {
                return null;
            }
            this.outerTuple = this.childOne.next();
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        OpIterator[] children = { this.childOne, this.childTwo };
        return children;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        this.childOne = children[0];
        this.childTwo = children[1];
    }

}
