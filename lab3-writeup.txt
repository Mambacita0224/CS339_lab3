# Lab 3 Writeup

Group members: Yuhang Zeng, Jason Qiu

## Design Decisions:

### Exercise 1 (Predicate, JoinPredicate, Filter, Join)

For Join, we used a nested loop to keep things simple.

### Exercise 2 (IntegerAggregator, StringAggregator, Aggregate)

For IntegerAggregator, we decided to store the grouped values as an ArrayList. The reason being we can use in-built Stream and Collections methods to calculate the aggregate values.

### Exercise 3 (HeapFile, HeapPage)

There was not much instruction on how to implement writePage. Thus, we decided to use a RandomAccessFile as it allows us to jump by an offset number of bytes before writing.

### Exercise 4 (Insert, Delete)

We were stumped on passing the test case for the tupleDesc, because we initially thought that the tupleDesc of Insert/Delete corresponded to the child's tupleDesc. 

However, after reading the documentation for fetchNext more carefully, we realized that the tupleDesc should correspond to a 1-field tuple.

We were also confused on the fetchNext methods in both Insert and Delete. In Insert::fetchNext, the documentation said to return null if called more than once. Delete::fetchNext did not say this. Thus, we assumed that Delete::fetchNext is similar to Insert::fetchNext and implemented a similar logic.

### Exercise 5 (BufferPool)

We decided to use a LRU policy for the evictPage method, because it is relatively easy to implement using a queue data structure and works well in general.

Our queue contains pageId's, with the least recently used pageId at the head and the most recently used pageId at the tail. We updated the queue when getPage, insertTuple, or deleteTuple is invoked.

## Incomplete Elements of Code:

There are some incomplete functionalities, such as transaction management, in this code. However, we believe we will implement them in the upcoming labs.

## Time and Effort Spent on Lab:

We spent about 12 hours on this lab. We found Exercise 2 and 3 to be the most difficult component of this lab and spent the most amount of time on it. We were stuck on implementing BufferPool::insertTuple because we did not update the hashmap containing the cached pages with the dirtied page.
